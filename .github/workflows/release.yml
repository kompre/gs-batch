name: Release

on:
  pull_request:
    types: [closed]

# Prevent concurrent releases
concurrency:
  group: release
  cancel-in-progress: false  # Queue releases instead of canceling

jobs:
  release:
    name: Automated Release
    # Only run if PR was merged and has 'release' label
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Create releases, tags, and commit version bumps
      id-token: write  # OIDC for PyPI Trusted Publishing
      pull-requests: write  # Create and merge version bump PRs

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  # Full history for proper tagging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Extract bump type from labels
        id: bump_type
        run: |
          # Get all PR labels as JSON array
          LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          echo "üìã PR Labels: $LABELS"

          # Extract all bump labels
          BUMP_LABELS=$(echo "$LABELS" | jq -r '.[] | select(startswith("bump:")) | sub("bump:"; "")')
          BUMP_COUNT=$(echo "$BUMP_LABELS" | wc -w)

          echo "Found $BUMP_COUNT bump label(s): $BUMP_LABELS"

          # Define categories
          VERSION_COMPONENTS="major minor patch"
          PRERELEASE_TYPES="rc alpha beta dev"
          STABLE_TYPES="major minor patch stable post"

          # Separate labels by category
          COMPONENT=""
          PRERELEASE=""
          for label in $BUMP_LABELS; do
            if echo "$VERSION_COMPONENTS" | grep -qw "$label"; then
              COMPONENT="$label"
            elif echo "$PRERELEASE_TYPES" | grep -qw "$label"; then
              PRERELEASE="$label"
            elif [ "$label" = "stable" ] || [ "$label" = "post" ]; then
              COMPONENT="$label"
            fi
          done

          # Validation
          if [ $BUMP_COUNT -eq 0 ]; then
            echo "‚ùå Error: No bump type label found!"
            echo ""
            echo "Required: Add labels to your PR:"
            echo ""
            echo "Stable releases (one label) ‚Üí Production PyPI:"
            echo "  - bump:major  ‚Üí Breaking changes (x.0.0)"
            echo "  - bump:minor  ‚Üí New features (0.x.0)"
            echo "  - bump:patch  ‚Üí Bug fixes (0.0.x)"
            echo "  - bump:stable ‚Üí Remove pre-release suffix (1.0.0rc1 ‚Üí 1.0.0)"
            echo "  - bump:post   ‚Üí Post-release (1.0.0 ‚Üí 1.0.0.post1)"
            echo ""
            echo "Pre-releases (two labels) ‚Üí TestPyPI:"
            echo "  - bump:minor + bump:rc    ‚Üí Release candidate (0.5.6 ‚Üí 0.6.0rc1)"
            echo "  - bump:patch + bump:beta  ‚Üí Beta (0.5.6 ‚Üí 0.5.7b1)"
            echo "  - bump:major + bump:alpha ‚Üí Alpha (0.5.6 ‚Üí 1.0.0a1)"
            echo "  - bump:patch + bump:dev   ‚Üí Development (0.5.6 ‚Üí 0.5.7.dev1)"
            exit 1
          elif [ $BUMP_COUNT -eq 1 ]; then
            # Must be stable type
            if ! echo "$STABLE_TYPES" | grep -qw "$BUMP_LABELS"; then
              echo "‚ùå Error: Single label '$BUMP_LABELS' is not a stable type"
              echo ""
              echo "For stable releases, use: major, minor, patch, stable, or post"
              echo "For pre-releases, add TWO labels: version component + pre-release type"
              echo "  Example: bump:minor + bump:rc ‚Üí 0.5.6 ‚Üí 0.6.0rc1"
              exit 1
            fi
            BUMP_TYPE_1="$BUMP_LABELS"
            BUMP_TYPE_2=""
            HAS_PRERELEASE="false"
            echo "‚úÖ Stable release: $BUMP_TYPE_1"
          elif [ $BUMP_COUNT -eq 2 ]; then
            # Must be component + prerelease
            if [ -z "$COMPONENT" ] || [ -z "$PRERELEASE" ]; then
              echo "‚ùå Error: Two labels must be one version component + one pre-release type"
              echo ""
              echo "Version components: major, minor, patch"
              echo "Pre-release types: rc, alpha, beta, dev"
              echo ""
              echo "Examples:"
              echo "  - bump:minor + bump:rc ‚Üí 0.5.6 ‚Üí 0.6.0rc1"
              echo "  - bump:patch + bump:beta ‚Üí 0.5.6 ‚Üí 0.5.7b1"
              exit 1
            fi
            BUMP_TYPE_1="$COMPONENT"
            BUMP_TYPE_2="$PRERELEASE"
            HAS_PRERELEASE="true"
            echo "‚úÖ Pre-release: $BUMP_TYPE_1 + $BUMP_TYPE_2"
          else
            echo "‚ùå Error: Too many bump labels ($BUMP_COUNT)"
            echo "Maximum 2 labels allowed (version component + pre-release type)"
            exit 1
          fi

          # Output results
          echo "bump_type_1=$BUMP_TYPE_1" >> $GITHUB_OUTPUT
          echo "bump_type_2=$BUMP_TYPE_2" >> $GITHUB_OUTPUT
          echo "has_prerelease=$HAS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Determine publish target (automatic based on bump type)
        id: target
        run: |
          HAS_PRERELEASE="${{ steps.bump_type.outputs.has_prerelease }}"
          BUMP_TYPE_1="${{ steps.bump_type.outputs.bump_type_1 }}"
          BUMP_TYPE_2="${{ steps.bump_type.outputs.bump_type_2 }}"

          if [ "$HAS_PRERELEASE" = "true" ]; then
            # Pre-releases (rc, alpha, beta, dev) ‚Üí TestPyPI
            echo "repository_url=https://test.pypi.org/legacy/" >> $GITHUB_OUTPUT
            echo "target_name=TestPyPI" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "üéØ Target: TestPyPI (pre-release: $BUMP_TYPE_1 + $BUMP_TYPE_2)"
          else
            # Stable releases (major, minor, patch, stable, post) ‚Üí Production PyPI
            echo "repository_url=https://upload.pypi.org/legacy/" >> $GITHUB_OUTPUT
            echo "target_name=PyPI" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
            echo "üéØ Target: Production PyPI (stable release: $BUMP_TYPE_1)"
          fi

      - name: Bump version with uv
        id: bump_version
        run: |
          echo "üì¶ Current version: $(uv version --short)"

          BUMP_TYPE_1="${{ steps.bump_type.outputs.bump_type_1 }}"
          BUMP_TYPE_2="${{ steps.bump_type.outputs.bump_type_2 }}"

          # Bump the version (one or two --bump flags)
          if [ -n "$BUMP_TYPE_2" ]; then
            echo "Running: uv version --bump $BUMP_TYPE_1 --bump $BUMP_TYPE_2"
            uv version --bump $BUMP_TYPE_1 --bump $BUMP_TYPE_2
          else
            echo "Running: uv version --bump $BUMP_TYPE_1"
            uv version --bump $BUMP_TYPE_1
          fi

          # Get new version
          NEW_VERSION=$(uv version --short)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "‚úÖ Bumped to: $NEW_VERSION"

      - name: Create version bump PR and auto-merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          NEW_VERSION="${{ steps.bump_version.outputs.version }}"
          BRANCH_NAME="release/bump-to-v$NEW_VERSION"
          BUMP_TYPE_1="${{ steps.bump_type.outputs.bump_type_1 }}"
          BUMP_TYPE_2="${{ steps.bump_type.outputs.bump_type_2 }}"

          if [ -n "$BUMP_TYPE_2" ]; then
            BUMP_DESCRIPTION="$BUMP_TYPE_1 + $BUMP_TYPE_2"
          else
            BUMP_DESCRIPTION="$BUMP_TYPE_1"
          fi

          # Create and push branch with version bump
          git checkout -b "$BRANCH_NAME"
          git add pyproject.toml uv.lock
          git commit -m "chore: bump version to $NEW_VERSION

          Automated version bump from merged PR #${{ github.event.pull_request.number }}
          Bump type: $BUMP_DESCRIPTION

          Co-Authored-By: ${{ github.event.pull_request.user.login }} <${{ github.event.pull_request.user.id }}+${{ github.event.pull_request.user.login }}@users.noreply.github.com>"

          git push origin "$BRANCH_NAME"

          # Create PR and enable auto-merge
          gh pr create \
            --base main \
            --head "$BRANCH_NAME" \
            --title "chore: bump version to $NEW_VERSION" \
            --body "Automated version bump to $NEW_VERSION

          **Bump type:** $BUMP_DESCRIPTION
          **Triggered by:** PR #${{ github.event.pull_request.number }}

          This PR will auto-merge once CI passes." \
            --label "automated"

          # Enable auto-merge (will merge when CI passes)
          gh pr merge "$BRANCH_NAME" --auto --squash

          echo "‚úÖ Created version bump PR, waiting for CI and auto-merge"

      - name: Wait for version bump to merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.version }}"
          BRANCH_NAME="release/bump-to-v$NEW_VERSION"

          echo "‚è≥ Waiting for version bump PR to merge..."

          # Wait for PR to be merged (poll every 10 seconds, max 5 minutes)
          for i in {1..30}; do
            PR_STATE=$(gh pr view "$BRANCH_NAME" --json state --jq .state 2>/dev/null || echo "NOTFOUND")

            if [ "$PR_STATE" = "MERGED" ]; then
              echo "‚úÖ Version bump PR merged successfully"
              break
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "‚ùå Version bump PR was closed without merging"
              exit 1
            elif [ "$PR_STATE" = "NOTFOUND" ]; then
              echo "‚ùå Version bump PR not found"
              exit 1
            fi

            echo "‚è≥ PR still open, waiting for CI to pass... ($i/30)"
            sleep 10
          done

          # Final verification
          PR_STATE=$(gh pr view "$BRANCH_NAME" --json state --jq .state 2>/dev/null || echo "NOTFOUND")
          if [ "$PR_STATE" != "MERGED" ]; then
            echo "‚ùå Version bump PR did not merge within 5 minutes"
            echo "Current state: $PR_STATE"
            exit 1
          fi

          echo "‚úÖ Version bump successfully merged to main"

      - name: Checkout updated main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Check if tag already exists
        run: |
          if git rev-parse "refs/tags/${{ steps.bump_version.outputs.tag }}" >/dev/null 2>&1; then
            echo "‚ùå Error: Tag ${{ steps.bump_version.outputs.tag }} already exists!"
            echo "This version has already been released."
            exit 1
          fi
          echo "‚úÖ Tag ${{ steps.bump_version.outputs.tag }} is available"

      - name: Create and push tag
        run: |
          BUMP_TYPE_1="${{ steps.bump_type.outputs.bump_type_1 }}"
          BUMP_TYPE_2="${{ steps.bump_type.outputs.bump_type_2 }}"

          if [ -n "$BUMP_TYPE_2" ]; then
            BUMP_DESCRIPTION="$BUMP_TYPE_1 + $BUMP_TYPE_2"
          else
            BUMP_DESCRIPTION="$BUMP_TYPE_1"
          fi

          git tag -a "${{ steps.bump_version.outputs.tag }}" -m "Release version ${{ steps.bump_version.outputs.version }}

          Released from PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
          Bump type: $BUMP_DESCRIPTION
          Target: ${{ steps.target.outputs.target_name }}"

          git push origin "${{ steps.bump_version.outputs.tag }}"
          echo "‚úÖ Created and pushed tag: ${{ steps.bump_version.outputs.tag }}"

      - name: Build package
        run: |
          uv build
          echo "üì¶ Build artifacts:"
          ls -lh dist/

          # Show package info
          echo ""
          echo "Package details:"
          tar -tzf dist/*.tar.gz | head -20
      - name: Publish to PyPI
        if: steps.target.outputs.is_production == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

      - name: Publish to TestPyPI
        if: steps.target.outputs.is_production == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          print-hash: true
          verbose: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump_version.outputs.tag }}
          name: ${{ steps.target.outputs.is_production == 'true' && format('Release {0}', steps.bump_version.outputs.version) || format('Release {0} (TestPyPI)', steps.bump_version.outputs.version) }}
          body: |
            # ${{ github.event.pull_request.title }}

            ${{ github.event.pull_request.body }}

            ---

            **üì¶ Version:** `${{ steps.bump_version.outputs.version }}`
            **üîñ Bump Type:** `${{ steps.bump_type.outputs.bump_type_2 && format('{0} + {1}', steps.bump_type.outputs.bump_type_1, steps.bump_type.outputs.bump_type_2) || steps.bump_type.outputs.bump_type_1 }}`
            **üéØ Published To:** ${{ steps.target.outputs.target_name }}

            ${{ steps.target.outputs.is_production == 'false' && format('‚ö†Ô∏è **This is a test release published to TestPyPI**

            Install from TestPyPI:
            ```bash
            pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ gs-batch-pdf=={0}
            ```

            **TestPyPI Package:** https://test.pypi.org/project/gs-batch-pdf/{0}/', steps.bump_version.outputs.version) || format('**PyPI Package:** https://pypi.org/project/gs-batch-pdf/{0}/', steps.bump_version.outputs.version) }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ steps.bump_version.outputs.tag }}
          files: dist/*
          draft: false
          prerelease: ${{ steps.target.outputs.is_production == 'false' || contains(steps.bump_version.outputs.version, 'a') || contains(steps.bump_version.outputs.version, 'b') || contains(steps.bump_version.outputs.version, 'rc') || contains(steps.bump_version.outputs.version, 'dev') }}
          generate_release_notes: true
